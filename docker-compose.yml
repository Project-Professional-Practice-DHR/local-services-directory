version: '3.8'

services:
  # API Service
  api:
    build: .
    container_name: local-services-api
    restart: unless-stopped
    ports:
      - "${PORT:-5001}:5001"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=5001
      # Override DATABASE_URL for local development with localhost
      - DATABASE_URL=${LOCAL_DB_URL:-${DATABASE_URL}}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Service (for local development)
  db:
    image: postgres:13-alpine
    container_name: local-services-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-local_services}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simple monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: local-services-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - api

  # Grafana for monitoring dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: local-services-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus

  # Adminer database management (optional, for development)
  adminer:
    image: adminer
    container_name: local-services-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - db
    profiles:
      - dev

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data: