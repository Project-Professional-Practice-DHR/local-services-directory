name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, development ]
  pull_request:
    branches: [ main, staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test environment file
      run: cp .env.test .env
    
    - name: Lint code
      run: npm run lint || true
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test_secret
    
    - name: Generate coverage report
      run: npm run coverage || true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run dependency vulnerability scan
      run: npx audit-ci --moderate || true
    
    - name: Install Gitleaks
      run: |
        wget https://github.com/zricethezav/gitleaks/releases/download/v8.2.0/gitleaks_8.2.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.2.0_linux_x64.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/
    
    - name: Run secret scanning
      run: gitleaks detect --source . --report-format json --report-path leak_report.json || true
    
    - name: Upload leak report if found
      uses: actions/upload-artifact@v3
      with:
        name: leak-report
        path: leak_report.json
      if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: |
        mkdir -p dist
        cp -r . dist/
        rm -rf dist/node_modules
        npm run build --if-present || true
    
    - name: Create DB backup (if on main branch)
      if: github.ref == 'refs/heads/main'
      run: node scripts/backup.js || echo "Backup skipped"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
    
    - name: Set up environment variables
      run: cp .env.development .env
    
    - name: Install Railway CLI
      run: npm i -g @railway/cli
    
    - name: Deploy to Railway (Development)
      run: |
        echo "Deploying to Railway development environment"
        railway login --token "$RAILWAY_TOKEN"
        railway link --project "$DEV_PROJECT_ID"
        railway up
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        DEV_PROJECT_ID: ${{ secrets.DEV_PROJECT_ID }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
    
    - name: Set up environment variables
      run: cp .env.staging .env
    
    - name: Install Railway CLI
      run: npm i -g @railway/cli
    
    - name: Deploy to Railway (Staging)
      run: |
        echo "Deploying to Railway staging environment"
        railway login --token "$RAILWAY_TOKEN"
        railway link --project "$STAGING_PROJECT_ID"
        railway up
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        STAGING_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
    
    - name: Set up environment variables
      run: cp .env.production .env
    
    - name: Install Railway CLI
      run: npm i -g @railway/cli
    
    - name: Deploy to Railway (Production)
      run: |
        echo "Deploying to Railway production environment"
        railway login --token "$RAILWAY_TOKEN"
        railway link --project "$PROD_PROJECT_ID"
        railway up
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        PROD_PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}
        
    - name: Verify deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        if [ -n "$PROD_URL" ]; then
          curl -s -o /dev/null -w "%{http_code}" $PROD_URL/health || echo "Verification skipped"
        else
          echo "Production URL not set, skipping verification"
        fi
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
      
    - name: Send Discord notification
      if: success() && env.DISCORD_WEBHOOK != ''
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        DISCORD_USERNAME: "Deployment Bot"
        DISCORD_AVATAR: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
      with:
        args: "ðŸš€ Production deployment complete for Local Services Directory! Version: ${{ github.sha }}"